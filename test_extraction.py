#!/usr/bin/env python3
"""
Simple test script to debug extraction logic
"""

import requests
from bs4 import BeautifulSoup
import re

def test_extraction():
    url = "https://www.timeout.com/bangkok/restaurants/bangkoks-best-new-cafes-of-2025"
    session = requests.Session()
    session.headers.update({
        'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
    })
    
    try:
        response = session.get(url)
        response.raise_for_status()
        soup = BeautifulSoup(response.content, 'html.parser')
        
        print("üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –õ–û–ì–ò–ö–ò –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø")
        print("=" * 60)
        
        # Find first numbered heading
        headings = soup.find_all(['h2', 'h3'])
        numbered_headings = []
        
        for heading in headings:
            heading_text = heading.get_text(strip=True)
            if re.match(r'^\d+\.', heading_text):
                numbered_headings.append(heading)
        
        if numbered_headings:
            heading = numbered_headings[0]
            heading_text = heading.get_text(strip=True)
            
            print(f"üìã –ü–µ—Ä–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫: '{heading_text}'")
            print(f"   HTML: {heading}")
            
            # Test name extraction
            name_raw = re.sub(r'^\d+\.', '', heading_text).strip()
            print(f"üìù –ò–∑–≤–ª–µ—á–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: '{name_raw}'")
            
            # Test place URL extraction
            link = heading.find('a')
            if link:
                href = link.get('href')
                print(f"üîó –°—Å—ã–ª–∫–∞: {href}")
            else:
                print("üîó –°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
            # Test tile container
            tile_container = heading.parent.parent
            print(f"üèóÔ∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–≥–æ–ª–æ–≤–∫–∞: <{tile_container.name}> class='{tile_container.get('class', [])}'")
            
            # Find the actual tile container (parent of the title container)
            actual_tile_container = tile_container.parent
            print(f"üèóÔ∏è –†–µ–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–ª–∏—Ç–∫–∏: <{actual_tile_container.name}> class='{actual_tile_container.get('class', [])}'")
            
            # Look for content in the actual tile container
            print(f"\nüìÑ –ü–û–ò–°–ö –ö–û–ù–¢–ï–ù–¢–ê –í –†–ï–ê–õ–¨–ù–û–ú –ö–û–ù–¢–ï–ô–ù–ï–†–ï:")
            content_elements = actual_tile_container.find_all(['p', 'div', 'img', 'a'])
            print(f"   –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(content_elements)}")
            
            for i, elem in enumerate(content_elements[:15], 1):
                elem_type = elem.name
                elem_text = elem.get_text(strip=True)[:80] if elem.get_text(strip=True) else '–ø—É—Å—Ç–æ'
                elem_class = elem.get('class', [])
                
                print(f"   {i}. <{elem_type}> class='{elem_class}': '{elem_text}...'")
                
                # Look for specific patterns
                if elem.name == 'p':
                    if 'address' in elem_text.lower():
                        print(f"      üè† –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–´–ô –ê–î–†–ï–°!")
                    elif len(elem_text) > 50:
                        print(f"      üìù –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–û–ï –û–ü–ò–°–ê–ù–ò–ï!")
                
                if elem.name == 'img':
                    src = elem.get('src', '')
                    alt = elem.get('alt', '')
                    print(f"      üñºÔ∏è –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï: src='{src}', alt='{alt}'")
            
            # Test description extraction
            summary_container = actual_tile_container.find('div', class_='_summaryContainer_osmln_364')
            if summary_container:
                print(f"\nüìÑ –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –æ–ø–∏—Å–∞–Ω–∏—è: {summary_container}")
                
                paragraphs = summary_container.find_all('p')
                print(f"   –ü–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤: {len(paragraphs)}")
                
                for i, p in enumerate(paragraphs, 1):
                    text = p.get_text(strip=True)
                    print(f"   {i}. '{text[:100]}...'")
                    
                    if text.lower().startswith('address'):
                        print(f"      üè† –≠–¢–û –ê–î–†–ï–°!")
                    elif len(text) > 30:
                        print(f"      üìù –≠–¢–û –û–ü–ò–°–ê–ù–ò–ï!")
            else:
                print("\n‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –æ–ø–∏—Å–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            # Test categories extraction
            tags_container = actual_tile_container.find('div', class_='_tileTags_osmln_50')
            if tags_container:
                print(f"\nüè∑Ô∏è –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ç–µ–≥–æ–≤: {tags_container}")
                tags_text = tags_container.get_text(strip=True)
                print(f"   –¢–µ–∫—Å—Ç —Ç–µ–≥–æ–≤: '{tags_text}'")
            else:
                print("\n‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ç–µ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            # Test image extraction
            image_container = actual_tile_container.find('div', class_='_imageContainer_osmln_46')
            if image_container:
                print(f"\nüñºÔ∏è –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {image_container}")
                
                images = image_container.find_all('img')
                print(f"   –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(images)}")
                
                for i, img in enumerate(images, 1):
                    src = img.get('src', '')
                    alt = img.get('alt', '')
                    print(f"   {i}. src: {src}")
                    print(f"      alt: {alt}")
            else:
                print("\n‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

if __name__ == "__main__":
    test_extraction()
